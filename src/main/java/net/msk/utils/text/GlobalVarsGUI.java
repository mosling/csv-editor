package net.msk.utils.text;

import com.toedter.calendar.JCalendar;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.swing.*;
import javax.swing.text.JTextComponent;
import java.awt.*;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

public class GlobalVarsGUI extends javax.swing.JDialog
{
    private static Logger LOGGER = LogManager.getLogger(GlobalVarsGUI.class);
    private String[] al;
    private String[] ll;
    private ArrayList editVars;
    private ArrayList tfields;
    private GlobalVars gv;
    private String df;
    private Insets fieldinsets;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel gridPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField statusbar;

    public GlobalVarsGUI(GlobalVars g, String[] sf)
    {
        initVariables(g, sf);
    }

    public GlobalVarsGUI(GlobalVars g, String[] sf, String[] labellist)
    {
        initVariables(g, sf, labellist);
    }

    /**
     * Creates new form GlobalVarsGUI
     */
    public GlobalVarsGUI(GlobalVars g, String[] sf, Frame parent)
    {
        super(parent, true);
        initVariables(g, sf);
        initComponents();
        addVarNames(gridPanel);
        pack();
        setLocationRelativeTo(parent);
    }

    private void initVariables(GlobalVars g, String[] sf)
    {
        al = sf;
        gv = g;
        editVars = new ArrayList();
        tfields = new ArrayList();
    }

    private void initVariables(GlobalVars g, String[] sf, String[] labellist)
    {
        initVariables(g, sf);
        ll = labellist;
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        gridPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        statusbar = new javax.swing.JTextField();

        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.X_AXIS));

        setTitle("input missing variables");
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        jPanel1.setBorder(new javax.swing.border.EtchedBorder());
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

        jPanel2.setBorder(new javax.swing.border.EtchedBorder());
        gridPanel.setLayout(new java.awt.GridBagLayout());

        gridPanel.setBorder(new javax.swing.border.TitledBorder("variable list"));
        jPanel2.add(gridPanel);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 6, 2));

        jButton1.setToolTipText("Verwerfen");
        jButton1.setText("cancel");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonActionPerformed(evt);
            }
        });

        jPanel3.add(jButton1);

        jButton2.setText("ok");
        jButton2.setToolTipText("Akzeptieren");
        jButton2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonActionPerformed(evt);
            }
        });

        jPanel3.add(jButton2);

        jPanel2.add(jPanel3);

        jPanel1.add(jPanel2);

        statusbar.setEditable(false);
        statusbar.setText("input variables");
        statusbar.setBackground(new java.awt.Color(204, 204, 204));
        statusbar.setBorder(new javax.swing.border.EtchedBorder());
        jPanel1.add(statusbar);

        getContentPane().add(jPanel1);

    }//GEN-END:initComponents

    private void buttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buttonActionPerformed
    {//GEN-HEADEREND:event_buttonActionPerformed
        // Add your handling code here:
        verifyVarNames(evt);
        closeDialog(null);
    }//GEN-LAST:event_buttonActionPerformed

    // Kommentiert für NB4
    //	private void cdNumberSelectActionPerformed(java.awt.event.ActionEvent e)
    //	{
    //		com.bp.tll.imp.SgetCDnumber cdnr=new com.bp.tll.imp.SgetCDnumber();
    //
    //		cdnr.start(gv);
    //
    //		if (cdnr.getResult()==0)
    //		{
    //			try
    //			{
    //				JTextField f=(JTextField)tfields.get(Integer.parseInt(e.getActionCommand()));
    //				f.setText((String)gv.getVar("cdnumber"));
    //			}
    //			catch (NumberFormatException ex)
    //			{
    //				LOGGER.error("not a number ("+e.getActionCommand()+")");
    //				System.exit(1);
    //			}
    //		}
    //	}

    private void pathSelectActionPerformed(java.awt.event.ActionEvent e)
    {
        String fname = new String("");
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        try
        {
            fc.setCurrentDirectory(new File(((JTextComponent)
                tfields.get(Integer.parseInt(e.getActionCommand()))).getText()));
        } catch (NumberFormatException ex)
        {
            fc.setCurrentDirectory(new File("/"));
        }

        int retval = fc.showDialog(this.gridPanel, "Pfad auswählen");
        if (retval == JFileChooser.APPROVE_OPTION)
        {
            // the user can select directories only
            java.io.File file = fc.getSelectedFile();
            fname = file.getAbsolutePath();
        }

        try
        {
            JTextField f = (JTextField) tfields.get(Integer.parseInt(e.getActionCommand()));
            f.setText(fname);
        } catch (NumberFormatException ex)
        {
            LOGGER.error("not a number (" + e.getActionCommand() + ")");
            System.exit(1);
        }
    }

    private void fileSelectActionPerformed(java.awt.event.ActionEvent e)
    {
        String fname = new String("");
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        try
        {
            fc.setCurrentDirectory(new File(((JTextComponent)
                tfields.get(Integer.parseInt(e.getActionCommand()))).getText()));
        } catch (NumberFormatException ex)
        {
            fc.setCurrentDirectory(new File("/"));
        }

        int retval = fc.showDialog(this, "Datei auswählen");
        if (retval == JFileChooser.APPROVE_OPTION)
        {
            // the user can select directories only
            java.io.File file = fc.getSelectedFile();
            fname = file.getAbsolutePath();
        }

        try
        {
            JTextField f = (JTextField) tfields.get(Integer.parseInt(e.getActionCommand()));
            f.setText(fname);
        } catch (NumberFormatException ex)
        {
            LOGGER.error("not a number (" + e.getActionCommand() + ")");
            System.exit(1);
        }
    }

    public void setFieldInsets(Insets fi)
    {
        fieldinsets = fi;
    }

    public String getDateFormat()
    {
        return df;
    }

    public void setDateFormat(String pdf)
    {
        df = pdf;
    }

    private String getStringDate(Date date)
    {
        SimpleDateFormat sdf = new SimpleDateFormat(df);
        return sdf.format(date);
    }

    private void calendarSelectActionPerformed(java.awt.event.ActionEvent e)
    {

        try
        {
            JCalendar jcalendar = new JCalendar();
            JCalendarChooser jCalendarChooser = new JCalendarChooser(jcalendar);
            jCalendarChooser.setModal(true);
            JTextField f = (JTextField) tfields.get(Integer.parseInt(e.getActionCommand()));
            jCalendarChooser.setLocationRelativeTo(f);
            jCalendarChooser.show();
            Date date = jcalendar.getDate();

            f = (JTextField) tfields.get(Integer.parseInt(e.getActionCommand()));
            f.setText(getStringDate(date));
        } catch (NumberFormatException ex)
        {
            LOGGER.error("not a number (" + e.getActionCommand() + ")");
            System.exit(1);
        }
    }

    /**
     * Es werden f"ur die Variablen mit den Typen java.lang.String und
     * java.lang.Integer Eingabefelder erstellt.
     * Dabei richtet sich das Erscheinungsbild und die Menge g"ultiger Eingaben nach
     * den Eigenschaften, welche in GlobalVars hinterlegt wurden. Folgende Eigenschaften
     * werden verarbeitet:
     * <ol>
     * <item>PW ein Passwortfeld</item>
     * <item>TA ein Textfeld, mehrere Zeilen m&ouml;glich</item>
     * <item>PS Auswahl eines Verzeichnisses</item>
     * <item>FS Auswahl einer Datei</item>
     * <item>DT Datumseingabe im Format dd.mm.yyyy</item>
     * *<item>CL Datumseingabe "uber JCalendar</item>
     * <item>CD es wird die n&auml;chste Nummer aus der Datenbanksequenz geholt, diese
     * Funktionalit&auml;t mu&szlig; unbeding verallgemeinert werden.
     * <item>L&lt;n&gt; Angabe einer L&auml;nge, wirkt nur bei einfachen Textfeldern</item>
     * </ol>
     */
    public void addVarNames(javax.swing.JPanel panel)
    {
        GridBagConstraints gbc;

        if (panel != gridPanel)
        {
            gridPanel = panel;
        }

        javax.swing.text.JTextComponent tc = null;
        int cnt = -1;

        for (int i = 0; i < al.length; i++)
        {
            // the ArrayList index, can be lower than i
            cnt++;
            // first create the label
            JLabel l = new JLabel();
            if (ll != null && ll[i] != null)
            {
                l.setText(ll[i]);
            } else
            {
                l.setText(al[i]);
            }
            l.setAlignmentX(javax.swing.JLabel.RIGHT_ALIGNMENT);
            gbc = new GridBagConstraints();
            gbc.gridx = 0;
            gbc.gridy = i;
            gbc.insets = new Insets(0, 5, 0, 5);
            gbc.fill = GridBagConstraints.BOTH;
            panel.add(l, gbc);

            // this is an editable variable
            GUIVar guiVar = new GUIVar();
            guiVar.setName(al[i]);
            guiVar.setLabel(l);
            editVars.add(guiVar);

            // now create the entry
            gbc = new GridBagConstraints();
            gbc.gridx = 1;
            gbc.gridy = i;
            gbc.gridwidth = 200;
            if (fieldinsets != null)
            {
                gbc.insets = fieldinsets;
            }
            gbc.fill = GridBagConstraints.BOTH;
            gbc.weightx = 100.0;
            boolean added = false;
            if (gv.hasProperty(al[i], GlobalVars.PROP_PASSWORD))
            {
                // create an Password entry
                tc = new JPasswordField();
                if (gv.existsVar(al[i]))
                    tc.setText(gv.getVar(al[i]).toString());
            } else if (gv.hasProperty(al[i], GlobalVars.PROP_TEXTAREA))
            {
                // create an ScrollArea
                JTextArea ta = new JTextArea();
                JScrollPane sp = new JScrollPane(ta);
                sp.setPreferredSize(new Dimension(200, 60));
                ta.setAutoscrolls(true);
                ta.setWrapStyleWord(true);
                ta.setLineWrap(true);
                tfields.add(ta);
                gbc.weighty = 100.0;
                panel.add(sp, gbc);
                added = true;
            } else if (gv.hasProperty(al[i], GlobalVars.PROP_PATH_SELECTION) || gv
                .hasProperty(al[i], GlobalVars.PROP_FILE_SELECTION))
            {
                // create an Textfield with path selection button
                JPanel ptmp = new JPanel();
                tc = new JTextField();
                if (gv.existsVar(al[i]))
                    tc.setText(gv.getVar(al[i]).toString());
                JButton btmp = new JButton("?");
                ptmp.setLayout(new BoxLayout(ptmp, BoxLayout.X_AXIS));
                ptmp.add(tc);
                ptmp.add(btmp);
                btmp.setActionCommand(String.valueOf(cnt));
                if (gv.hasProperty(al[i], GlobalVars.PROP_PATH_SELECTION))
                {
                    btmp.addActionListener(new java.awt.event.ActionListener()
                    {
                        public void actionPerformed(java.awt.event.ActionEvent evt)
                        {
                            pathSelectActionPerformed(evt);
                        }
                    });
                    btmp.setActionCommand(String.valueOf(i));
                } else
                {
                    btmp.addActionListener(new java.awt.event.ActionListener()
                    {
                        public void actionPerformed(java.awt.event.ActionEvent evt)
                        {
                            fileSelectActionPerformed(evt);
                        }
                    });
                }
                panel.add(ptmp, gbc);
                tfields.add(tc);
                added = true;
            }
            // !!! Kommentiert für NB4
            //			else if (gv.hasProperty(al[i],"CD"))
            //			{
            //				// create an Textfield with getcdnumber-button
            //				JPanel ptmp=new JPanel();
            //				tc=new JTextField();
            //				if (gv.existsVar(al[i]))
            //					tc.setText(gv.getVar(al[i]).toString());
            //				JButton btmp=new JButton("?");
            //				ptmp.setLayout(new BoxLayout(ptmp,BoxLayout.X_AXIS));
            //				ptmp.add(tc);
            //				ptmp.add(btmp);
            //				btmp.setActionCommand(String.valueOf(cnt));
            //				btmp.addActionListener(new java.awt.event.ActionListener()
            //				{
            //					public void actionPerformed(java.awt.event.ActionEvent evt)
            //					{
            //						cdNumberSelectActionPerformed(evt);
            //					}
            //				});
            //				panel.add(ptmp,gbc);
            //				tfields.add(tc);
            //				added=true;
            //			}
            else if (gv.hasProperty(al[i], GlobalVars.PROP_DATE))
            {
                tc = new JTextField();
                tc.setInputVerifier(new DateInputVerifier("dd.MM.yyyy"));
                if (gv.existsVar(al[i]))
                    tc.setText(gv.getVar(al[i]).toString());
            } else if (gv.hasProperty(al[i], GlobalVars.PROP_CALENDAR))
            {
                // create an Textfield with JCalendar selection button
                JPanel ptmp = new JPanel();
                tc = new JTextField();
                tc.setEditable(false);
                if (gv.existsVar(al[i]))
                    tc.setText(gv.getVar(al[i]).toString());
                JButton btmp = new JButton("?");
                ptmp.setLayout(new BoxLayout(ptmp, BoxLayout.X_AXIS));
                ptmp.add(tc);
                ptmp.add(btmp);
                btmp.setActionCommand(String.valueOf(cnt));

                btmp.addActionListener(new java.awt.event.ActionListener()
                {
                    public void actionPerformed(java.awt.event.ActionEvent evt)
                    {
                        calendarSelectActionPerformed(evt);
                    }
                });

                btmp.setActionCommand(String.valueOf(i));

                panel.add(ptmp, gbc);
                tfields.add(tc);
                added = true;
            } else
            {
                tc = new JTextField();
                if (gv.hasProperty(al[i], "L"))
                {
                    int len = Integer.parseInt(gv.getPropertyParam(al[i], "L"));
                    tc.setInputVerifier(new LengthInputVerifier(len));
                }
                if (gv.existsVar(al[i]))
                {
                    // works for String
                    if ((gv.getVar(al[i])).getClass().getName().compareTo("java.lang.String") == 0)
                    {
                        tc.setText(gv.getVar(al[i]).toString());
                        // possible the string represents a number
                        if (gv.hasProperty(al[i], "DTint"))
                        {
                            tc.setInputVerifier(new IntegerInputVerifier());
                        }
                        if (gv.hasProperty(al[i], "DTdouble"))
                        {
                            tc.setInputVerifier(new DoubleInputVerifier());
                        }
                    } else if ((gv.getVar(al[i])).getClass().getName().compareTo("java.lang.Integer") == 0)
                    {
                        tc.setText(gv.getVar(al[i]).toString());
                        tc.setInputVerifier(new IntegerInputVerifier());
                    } else
                    {
                        // this field shouldn't be visible at any time
                        String tmpStr = gv.getVar(al[i]).toString();
                        int len = Math.min(tmpStr.length(), 10);
                        tc.setText("<nicht editierbar>" + tmpStr.substring(0, len));
                        tc.setEnabled(false);
                    }
                } else
                {
                    tc.setText("");
                }
            }
            // now add the new field to the Panel, if not added by special case
            if (!added)
            {
                tc.setPreferredSize(new Dimension(200, 21));
                panel.add(tc, gbc);
                tfields.add(tc);
            }
        } // end for
    }

    /**
     */
    public boolean verifyVarNames(java.awt.event.ActionEvent evt)
    {
        if (evt.getActionCommand().equalsIgnoreCase("ok"))
        {
            // first verify all inputs
            for (int n = 0; n < editVars.size(); n++)
            {
                javax.swing.text.JTextComponent tc = (javax.swing.text.JTextComponent) tfields.get(n);
                if (tc.getInputVerifier() != null)
                    if (!tc.getInputVerifier().verify(tc))
                    {
                        // show the user his error
                        JOptionPane.showMessageDialog(jPanel1, "Eingabe ungültig: " +
                            tc.getText() + "\n(" + tc.getInputVerifier().toString() + ")");
                        return false;
                    }
            }

            boolean integer;
            for (int n = 0; n < editVars.size(); n++)
            {
                // we need no checks about datatypes, because we allow editable
                // types (String and Integer) only
                String vn = ((GUIVar) editVars.get(n)).getName();
                javax.swing.text.JTextComponent tc = (javax.swing.text.JTextComponent) tfields.get(n);
                integer = false;
                // write an Integer-Object
                if (gv.existsVar(vn))
                {
                    if (gv.getVar(vn).getClass().getName().compareTo("java.lang.Integer") == 0)
                    {
                        try
                        {
                            gv.setVar(vn, new Integer(tc.getText()));
                            integer = true;
                        } catch (NumberFormatException e)
                        {
                            LOGGER.error("internal error: " + e.toString());
                        }
                    }
                }
                if (!integer)
                {
                    // overwrite or create an new String-variable
                    gv.setVar(vn, tc.getText());
                }
            }
        } else
        {
            // user pressed the cancel button, we create all not existing variables
            for (int n = 0; n < editVars.size(); n++)
            {
                String vn = ((GUIVar) editVars.get(n)).getName();
                if (!gv.existsVar(vn))
                {
                    gv.setVar(vn, new String(""));
                }
            }
        }
        return true;
    }

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt)
    {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    // End of variables declaration//GEN-END:variables
}